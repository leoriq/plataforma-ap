// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

enum Role {
    COORDINATOR
    REP_INSTRUCTOR
    INSTRUCTOR
    MATERIAL
    STUDENT
}

enum AnswerType {
    AUDIO
    OPTIONS
    TEXT
}

model File {
    id           String  @id @default(uuid())
    name         String
    title        String?
    uploadedById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    lessonId String?

    ProfilePictureOf User?
    QuestionAudioOf  Question?           @relation("audio")
    QuestionImageOf  Question?           @relation("image")
    UserAnswerOf     UserQuestionAnswer?
    LessonDocumentOf Lesson?             @relation(fields: [lessonId], references: [id])
}

model User {
    id          String  @id @default(cuid())
    email       String  @unique
    password    String?
    accessToken String  @unique @default(uuid())
    fullName    String?
    roles       Role[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    profilePictureFileId String? @unique

    ProfilePicture    File?                @relation(fields: [profilePictureFileId], references: [id])
    InstructorClasses Class[]              @relation("instructor")
    StudentClass      Class[]              @relation("student")
    MeetingsAttended  SynchronousMeeting[] @relation("attended")
    MeetingsExcused   SynchronousMeeting[] @relation("excusedAbsence")
    MeetingsAbsent    SynchronousMeeting[] @relation("absence")
    Answers           UserQuestionAnswer[]
}

model SynchronousMeeting {
    id   String   @id @default(cuid())
    date DateTime @db.Date

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    classId String

    Class             Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
    AttendingStudents User[] @relation("attended")
    ExcusedStudents   User[] @relation("excusedAbsence")
    AbsentStudents    User[] @relation("absence")

    @@unique([classId, date])
}

model Class {
    id          String  @id @default(cuid())
    name        String
    description String?
    archived    Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    lessonCollectionId String

    Collection         LessonCollection     @relation(fields: [lessonCollectionId], references: [id], onDelete: Restrict)
    Instructors        User[]               @relation("instructor")
    Students           User[]               @relation("student")
    SynchronousMeeting SynchronousMeeting[]
}

model LessonCollection {
    id          String  @id @default(cuid())
    name        String
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Classes Class[]
    Lessons Lesson[]
}

model Lesson {
    id              String   @id @default(cuid())
    title           String
    body            String
    videosIds       String[]
    publicationDate DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    lessonCollectionId String

    Documents      File[]
    Collection     LessonCollection @relation(fields: [lessonCollectionId], references: [id], onDelete: Cascade)
    Questionnaires Questionnaire[]
}

model Questionnaire {
    id     String @id @default(cuid())
    title  String
    weight Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    lessonId String

    Lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    Questions Question[]
}

model Question {
    id          String     @id @default(cuid())
    title       String
    description String?
    videoId     String?
    answerType  AnswerType
    options     String[]   @default([])
    weight      Int
    index       Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    questionnaireId String
    imageFileId     String? @unique
    audioFileId     String? @unique

    Questionnaire Questionnaire        @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
    Image         File?                @relation("image", fields: [audioFileId], references: [id], onDelete: Restrict)
    Audio         File?                @relation("audio", fields: [imageFileId], references: [id], onDelete: Restrict)
    UserAnswer    UserQuestionAnswer[]
}

model UserQuestionAnswer {
    id                String  @id @default(cuid())
    grade             Int?
    answer            String?
    instructorComment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    questionId    String
    audioFileId   String? @unique
    studentUserId String

    Question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    Audio    File?    @relation(fields: [audioFileId], references: [id], onDelete: Restrict)
    Student  User     @relation(fields: [studentUserId], references: [id])

    @@unique([questionId, studentUserId])
}
