// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

enum Role {
    COORDINATOR
    REP_INSTRUCTOR
    INSTRUCTOR
    MATERIAL
    STUDENT
}

enum AnswerType {
    AUDIO
    OPTIONS
    TEXT
}

model File {
    id           String  @id @default(cuid())
    name         String
    title        String?
    uploadedById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ProfilePictureOf User?
    QuestionAudioOf  Question?   @relation("audio")
    QuestionImageOf  Question?   @relation("image")
    UserAnswerOf     UserAnswer?
    LessonDocumentOf Lesson?
}

model User {
    id       String  @id @default(cuid())
    email    String  @unique
    password String?
    fullName String?
    role     Role

    ProfilePicture   File?   @relation(fields: [profilePictureId], references: [id])
    profilePictureId String? @unique
    Class            Class?  @relation(fields: [classId], references: [id])
    classId          String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    UserReport UserReport[]
}

model Class {
    id          String  @id @default(cuid())
    name        String
    description String?

    Collection         LessonCollection @relation(fields: [lessonCollectionId], references: [id], onDelete: Restrict)
    lessonCollectionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    students User[]
}

model LessonCollection {
    id          String  @id @default(cuid())
    name        String
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Classes Class[]
    Lessons Lesson[]
}

model Lesson {
    id       String   @id @default(cuid())
    title    String
    body     String
    videoUrl String[]

    document           File?            @relation(fields: [documentFileId], references: [id], onDelete: Restrict)
    documentFileId     String?          @unique
    Collection         LessonCollection @relation(fields: [lessonCollectionId], references: [id], onDelete: Cascade)
    lessonCollectionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Questionnaires Questionnaire[]
}

model Questionnaire {
    id    String @id @default(cuid())
    title String

    Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Questions  Question[]
    UserReport UserReport[]
}

model Question {
    id          String     @id @default(cuid())
    title       String
    description String?
    videoUrl    String?
    answerType  AnswerType
    options     String[]
    maxGrade    Int

    Questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
    questionnaireId String
    Image           File?         @relation("image", fields: [audioFileId], references: [id], onDelete: Restrict)
    imageFileId     String?       @unique
    Audio           File?         @relation("audio", fields: [imageFileId], references: [id], onDelete: Restrict)
    audioFileId     String?       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    UserAnswer UserAnswer[]
}

model UserReport {
    id            String @id @default(cuid())
    gradeOutOf100 Int

    User            User          @relation(fields: [userId], references: [id])
    userId          String
    Questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
    questionnaireId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    answers UserAnswer[]
}

model UserAnswer {
    id     String  @id @default(cuid())
    grade  Int
    answer String?

    Question     Question    @relation(fields: [questionId], references: [id])
    questionId   String
    Audio        File?       @relation(fields: [audioFileId], references: [id])
    audioFileId  String?     @unique
    UserReport   UserReport? @relation(fields: [userReportId], references: [id])
    userReportId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
