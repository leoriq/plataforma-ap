// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

enum Role {
    COORDINATOR
    REP_INSTRUCTOR
    INSTRUCTOR
    MATERIAL
    STUDENT
}

enum AnswerType {
    AUDIO
    OPTIONS
    TEXT
}

model File {
    id         String       @id @default(cuid())
    name       String
    title      String?
    url        String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    User       User[]
    Question1  Question[]   @relation("audio")
    Question2  Question[]   @relation("image")
    UserAnswer UserAnswer[]
    Lesson     Lesson[]
}

model User {
    id          String       @id @default(cuid())
    email       String       @unique
    password    String?
    role        Role         @default(STUDENT)
    fullName    String?
    image       File?        @relation(fields: [imageFileId], references: [id])
    imageFileId String?
    Class       Class?       @relation(fields: [classId], references: [id])
    classId     String?
    UserReport  UserReport[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Class {
    id                 String           @id @default(cuid())
    name               String
    description        String?
    students           User[]
    Collection         LessonCollection @relation(fields: [lessonCollectionId], references: [id])
    lessonCollectionId String
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
}

model LessonCollection {
    id          String   @id @default(cuid())
    name        String
    description String?
    Classes     Class[]
    Lessons     Lesson[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Lesson {
    id                 String           @id @default(cuid())
    title              String
    body               String
    videoUrl           String[]
    document           File?            @relation(fields: [fileId], references: [id])
    Questionnaires     Questionaire[]
    Collection         LessonCollection @relation(fields: [lessonCollectionId], references: [id])
    lessonCollectionId String
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    fileId             String?
}

model Questionaire {
    id         String       @id @default(cuid())
    title      String
    questions  Question[]
    Lesson     Lesson?      @relation(fields: [lessonId], references: [id])
    lessonId   String?
    UserReport UserReport[]
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
}

model Question {
    id             String       @id @default(cuid())
    title          String
    description    String?
    Audio          File?        @relation("audio", fields: [imageFileId], references: [id])
    Image          File?        @relation("image", fields: [audioFileId], references: [id])
    videoUrl       String?
    answerType     AnswerType
    options        String[]
    maxGrade       Int
    UserAnswer     UserAnswer[]
    Questionaire   Questionaire @relation(fields: [questionaireId], references: [id])
    questionaireId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    imageFileId    String?
    audioFileId    String?
}

model UserReport {
    id             String       @id @default(cuid())
    gradeOutOf100  Int
    User           User         @relation(fields: [userId], references: [id])
    userId         String
    Questionaire   Questionaire @relation(fields: [questionaireId], references: [id])
    questionaireId String
    answers        UserAnswer[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model UserAnswer {
    id           String      @id @default(cuid())
    questionId   String
    question     Question    @relation(fields: [questionId], references: [id])
    answer       String?
    Audio        File?       @relation(fields: [audioFileId], references: [id])
    audioFileId  String?
    grade        Int
    UserReport   UserReport? @relation(fields: [userReportId], references: [id])
    userReportId String?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}
